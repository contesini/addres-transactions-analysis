const { GoogleSpreadsheet } = require('google-spreadsheet');
require('dotenv').config()


const loadSheet = async () => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY,
  });

  await doc.loadInfo()

  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  return sheet
}

const saveToSheets = async (transactions) => {
  const sheet = await loadSheet()
  sheet.headerValues = [...Object.keys(transactions[0])]
  
  await sheet.addRows(mapObjectValuesToArrayOfString(transactions), { insert: true })
}

const mapObjectValuesToArrayOfString = (transactions) => {
  const result = []
  transactions.forEach(transaction => {
    const transactionValuesToArrayOfStrings = []
    Object.keys(transaction).forEach(key => {
      transactionValuesToArrayOfStrings.push(String(transaction[key]))
    })
    result.push(transactionValuesToArrayOfStrings)
  })
  return result
}

const testSaveToSheets = async () => {
  const transactions = mapObjectValuesToArrayOfString(require('../../transactions.json'))
  await saveToSheets(transactions)
}

module.exports = {
  saveToSheets
};

//testSaveToSheets()